Nfluid
======

Nfluid simphony module for mesh generation of microchannel circuits.

.. image:: https://travis-ci.org/simphony/nfluid.svg?branch=master
   :target: https://travis-ci.org/simphony/nfluid
   :alt: Build status

Repository
----------
Nfluid is hosted on github https://github.com/simphony/nfluid

Requirements
------------
    - simphony >= 0.2.0
    - numpy >= 1.4.1

Optional requirements
---------------------
For mesh integrated visualization it needs visvis visualization library https://pypi.python.org/pypi/visvis/1.8
and PySide as the backend: https://pypi.python.org/pypi/PySide/1.2.4

Installation
------------
To install nfluid:

    python setup.py install

Structure
---------

    - core: main subpackage containing the base clases of nfluid
    - elements: subpackage that contains all the microchannel pieces the user can build with nfluid
    - external: subpackage with some matrix and arithmetic auxiliar files and functions
    - geometry: internal subpackage responsible of generating the final triangle meshes of the assemblies built with nfluid
    - shapes: intermediate subpackage between the core and the geometry package
    - tests: subpackage containing some usage examples of nfluid using all the posible pieces
    - util: subpackage with auxiliar utilies, also containing the OpenFOAM project generator utility, called snappy_generator.py
    - visualisation: internal subpackage with the files containing the visualization utilities

Building an assembly with nfluid
--------------------------------
Nfluid is an easy and user-friendly package for building microchannel assemblies of pieces.
First, user should import the ChannelAssembly class, as its the main class for nfluid:

    from nfluid.core.channel_assembly import ChannelAssembly, create_channel

We also import the create_channel function since it will be the starting point for generating channels of the assembly. After this we create the channel assembly object:

    my_assembly = ChannelAssembly()

After creating this, all the channels and elements will be added automatically to the assembly object. We can start building pieces:

    create_channel(CircleCoupling(R=10, L=20, PosH=Vector(0, 20, 30), Normal=Vector(0, 0, 1))).link(FlowAdapter(L=15)).link(CircleCoupling(R=45, L=125))

Using the link method of the elements we specify how the elements are connected. As we can see in the example above there is no
need to specify every parameter of each element since there are some of them that are inherited depending of which channel are they in
and their previous elements.

Once we have added all the elements we want, we tell nfluid to resolve the geometry of the channel/s using the assembly object we created before:

    my_assembly.resolve_geometry()

If there are no error messages means the everything went well and the geometry of the channel is correct (we can also check this programatically with the my_assembly.is_resolved_geometry() method).
After this we can show info of the assembly:

    my_assembly.print_info()

and create the meshes:

    my_assembly.create_shapes()

If everything went well, we can export and show the shapes:

    my_assembly.export_shapes('my_assembly.stl')
    my_assembly.show_shapes()

We we are done with the shapes, we can release them:

    my_assembly.release_shapes()

We can also get the mesh in simphony format (as a Mesh object):

    mesh = my_assembly.extract_simphony_mesh()

Notes
-----
The valid pieces that are now available and working are:

    - circle_coupling
    - circle_tee
    - flow_adapter
    - long_elbow
    - short_elbow
    - spheric_coupling

To be added very soon:
    
    - coupling_path: a piece that will be built joining user specified points
    - long_elbow_angle: a long elbow with a non 90 degrees angle
    - long_short_angle: a short elbow with a non 90 degrees angle

OpenFOAM project generation
---------------------------

Using templates, nfluid can generate project templates for the SnappyHexMesh utility:
http://cfd.direct/openfoam/user-guide/snappyHexMesh/

At this moment, the generator is in nfluid.util subpackage, and the python script is called snappy_generator.py
The usage is simple:

    python snappy_generator.py stl_file.stl snappy_template.txt

when:
    snappy_generator.py its the script
    stl_file.stl is the stl file generated by exporting using nfluid
    snappy_template.txt is the snappy hex mesh template that the script will use to generate the project structure

The snappy templates contain some keywords that, using information of the stl, will be replaced by the correct values. As a first approach,
there are three different templates in the nfluid package, but the user can potentially use their own templates, using the keywords that are used by the snappy_generator.py script.
